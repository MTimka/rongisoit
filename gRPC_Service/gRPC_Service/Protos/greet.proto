syntax = "proto3";

option csharp_namespace = "gRPC_Service";

package greet;

// The greeting service definition.
service Greeter {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply);

  rpc StartTimer(StartTimerRequest) returns (stream PeriodicUpdate);
  
  rpc UpdateTrainLocation(TrainLocation) returns (Response);
  rpc RemoveActiveTrain(RemoveActiveTrainRequest) returns (Response);

  // for client
  rpc SubscribeForImpact(SubscribeRequest) returns (stream Response);
  rpc UpdateUserLocation(UserLocation) returns (Response);
  rpc SubscribeForTrainLocationUpdates(SubscribeRequest) returns (stream TrainLocationUpdatesResponse);
  rpc UpdateUserImpactRadius(UserImpactRadiusRequest) returns (Response);


  // for data collecting
  rpc SubscribeForDataCollector(SubscribeRequest) returns (stream DataResponse);

}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings.
message HelloReply {
  string message = 1;
}

message StartTimerRequest {
  int32 interval_seconds = 1;
}

message PeriodicUpdate {
  int64 timestamp = 1;
}

message TrainLocation {
  string trainId = 1;
  double latitude = 2;
  double longitude = 3;
  double timestamp = 4;
  double predLatitude = 5;
  double predLongitude = 6;
}

message UserLocation {
  string id = 1;
  double latitude = 2;
  double longitude = 3;
}

message Response {
  string code = 1;
}

message SubscribeRequest {
  string id = 1;
}

message TrainLocationUpdatesResponse {
  string trainId = 1;
  double latitude = 2;
  double longitude = 3;
  bool isAlive = 4;
}

message RemoveActiveTrainRequest {
  string trainId = 1;
}

message DataResponse {
  string json = 1;
}

message UserImpactRadiusRequest {
  string id = 1;
  double radius = 2;
}